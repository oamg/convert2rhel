summary: |
    Kernel modules

tier: 0

tag+:
    - kernel-modules
    - kmods


/unsupported_kernel_module:
    summary+: |
        Unsupported kernel module
    description+:
        One kernel module is moved to a custom location,
        therefore denoted as custom by the running system.
    tag+:
        - ensure-kernel-modules-compatibility
        - inhibitor
    /inhibitor_with_unavailable_kmod_loaded:
        summary+: |
            Load custom kernel module
        description+: |
            This test verifies that rpmquery for detecting supported kernel modules in RHEL works correctly.
            If custom module is loaded the conversion has to raise:
            ENSURE_KERNEL_MODULES_COMPATIBILITY.UNSUPPORTED_KERNEL_MODULES.
        tag+:
            - custom-module-loaded
            - sanity
        test: |
            pytest -m test_inhibitor_with_unavailable_kmod_loaded

    /override_inhibitor_with_unavailable_kmod_loaded:
        summary+: |
            Bypass loaded custom kernel module
        description+: |
            This test verifies that setting the environment variable "CONVERT2RHEL_ALLOW_UNAVAILABLE_KMODS"
            will override the check error when there is an kernel module unavailable in RHEL detected.
            The environment variable is set through the test metadata.
        tag+:
            - override-inhibitor-with-unavailable-module-loaded
            - override
        test: |
            pytest -m test_override_inhibitor_with_unavailable_kmod_loaded
        link:
            verifies: https://issues.redhat.com/browse/RHELC-244


/tainted_kernel_module:
    summary+: |
        Tainted kernel module check
    tag+:
        - tainted-kernel-module
        - inhibitor

    /inhibitor_with_custom_built_tainted_kmod:
        summary+: |
            Custom built kernel module
        description+: |
            This test marks the kernel as tainted which is not supported by convert2rhel.
            We need to install specific kernel packages to build own custom kernel module.
            Verify TAINTED_KMODS.TAINTED_KMODS_DETECTED is raised.
        tag+:
            - custom-built-tainted-kernel-module
        test: |
            pytest -m test_inhibitor_with_custom_built_tainted_kmod

    /inhibitor_with_force_loaded_tainted_kmod:
        summary+: |
            Force load a kernel module
        description+: |
            In this test case we force load kmod and verify that the convert2rhel raises:
            TAINTED_KMODS.TAINTED_KMODS_DETECTED.
            Force loaded kmods are denoted (FE) where F = module was force loaded E = unsigned module was loaded.
            Convert2RHEL sees force loaded kmod as tainted.
        adjust+:
            - enabled: false
              when: distro == centos-7, oracle-7
              because: |
                Force loading the kernel module on RHEL7 like distros is flaky.
        tag+:
            - force-loaded-kmod
        test: |
            pytest -m test_inhibitor_with_force_loaded_tainted_kmod

    /override_inhibitor_with_tainted_kmod:
        summary+: |
            Check is overridable
        description+: |
            In this test case we force load kmod and verify that the TAINTED_KMODS.TAINTED_KMODS_DETECTED
            is overridable by setting the environment variable 'CONVERT2RHEL_TAINTED_KERNEL_MODULE_CHECK_SKIP'
            to '1'
            Force loaded kmods are denoted (FE) where F = module was force loaded E = unsigned module was loaded.
            Convert2RHEL sees force loaded kmod as tainted.
        adjust+:
            - enabled: false
              when: distro == centos-7, oracle-7
              because: |
                Force loading the kernel module on RHEL7 like distros is flaky.
        tag+:
            - force-loaded-kmod
            - override
        test: |
            pytest -m test_override_inhibitor_with_tainted_kmod
