import os
import re

import pytest

from conftest import SYSTEM_RELEASE_ENV
from envparse import env


PKI_ENTITLEMENT_CERTS_PATH = "/etc/pki/entitlement"

SERVER_SUB = "CentOS Linux"
PKGMANAGER = "yum"
FINAL_MESSAGE = "VALIDATE_PACKAGE_MANAGER_TRANSACTION::UNKNOWN_ERROR - There are no suitable mirrors available for the loaded repositories."

if "oracle" in SYSTEM_RELEASE_ENV:
    SERVER_SUB = "Oracle Linux Server"

if "8" in SYSTEM_RELEASE_ENV:
    PKGMANAGER = "dnf"
    FINAL_MESSAGE = "VALIDATE_PACKAGE_MANAGER_TRANSACTION::UNKNOWN_ERROR - Failed to download the transaction packages."


@pytest.fixture()
def yum_cache(shell):
    """
    We need to clean yum cache of packages and metadata downloaded by the
    previous test runs to correctly reproduce the transaction validation
    download fail.
    """
    assert shell("yum clean all --enablerepo=* --quiet").returncode == 0
    assert shell(f"rm -rf /var/cache/{PKGMANAGER}")


def remove_entitlement_certs():
    """
    Utility function to remove the entitlement certificate as soon as we
    notice it in the `PKI_ENTITLEMENT_CERTS_PATH`.

    We don't need to back it up and then restore it because the
    PKI_ENTITLEMENT_CERTS_PATH folder is only created during the conversion
    when the subscription-manager package is installed. And the .pem
    certificate is being generated by subscription-manager in the folder during
    the system registration. So to have the test system clean after the test
    finishes the certs shouldn't be present.
    """
    for cert_filename in os.listdir(PKI_ENTITLEMENT_CERTS_PATH):
        cert_path = os.path.join(PKI_ENTITLEMENT_CERTS_PATH, cert_filename)
        try:
            os.unlink(cert_path)
        except Exception as e:
            print("Failed to delete %s. Reason: %s" % (cert_path, e))


@pytest.mark.test_package_download_error
def test_package_download_error(convert2rhel, shell, yum_cache):
    """
    Remove the entitlement certs found at /etc/pki/entitlement during package
    download phase for both yum and dnf transactions.

    This will run the conversion up to the point where we validate the transaction.
    When the validation reaches a specific point, we remove the entitlement certs
    found in /etc/pki/entitlement/*.pem to ensure that the
    tool is doing a proper rollback when there is any failure during the package
    download.

    The package download happens in different phases for yum and dnf, yum
    downloads the packages during the `processTransaction` method call, while dnf
    has a specific method that processes and downloads the packages in the
    transaction.
    """
    with convert2rhel(
        "-y --no-rpm-va --serverurl {} --username {} --password {} --pool {} --debug".format(
            env.str("RHSM_SERVER_URL"),
            env.str("RHSM_USERNAME"),
            env.str("RHSM_PASSWORD"),
            env.str("RHSM_POOL"),
        )
    ) as c2r:
        c2r.expect("Validate the {} transaction".format(PKGMANAGER))
        c2r.expect("Adding {} packages to the {} transaction set.".format(SERVER_SUB, PKGMANAGER))

        if re.match(r"^(centos|oracle)-7$", SYSTEM_RELEASE_ENV):
            # Remove the repomd.xml for rhel-7-server-rpms repo
            os.unlink("/var/cache/yum/x86_64/7Server/rhel-7-server-rpms/repomd.xml")

        remove_entitlement_certs()

        assert c2r.expect_exact(FINAL_MESSAGE, timeout=600) == 0

    assert c2r.exitstatus == 1


@pytest.mark.test_transaction_validation_error
def test_transaction_validation_error(convert2rhel, shell, yum_cache):
    """
    Remove the entitlement certs found at /etc/pki/entitlement during transaction
    processing to throw the following yum error: pkgmanager.Errors.YumDownloadError

    This will run the conversion up to the point where we validate the transaction.
    When the validation reaches a specific point, we remove the entitlement certs
    found in /etc/pki/entitlement/*.pem to ensure that the
    tool is doing a proper rollback when the transaction is being processed.
    """
    with convert2rhel(
        "-y --no-rpm-va --serverurl {} --username {} --password {} --pool {} --debug".format(
            env.str("RHSM_SERVER_URL"),
            env.str("RHSM_USERNAME"),
            env.str("RHSM_PASSWORD"),
            env.str("RHSM_POOL"),
        )
    ) as c2r:
        c2r.expect(
            "Downloading and validating the yum transaction set, no modifications to the system will happen this time."
        )

        if re.match(r"^(centos|oracle)-7$", SYSTEM_RELEASE_ENV):
            # Remove the repomd.xml for rhel-7-server-rpms repo
            os.unlink("/var/cache/yum/x86_64/7Server/rhel-7-server-rpms/repomd.xml")

        remove_entitlement_certs()
        assert (
            c2r.expect_exact(
                "VALIDATE_PACKAGE_MANAGER_TRANSACTION::UNKNOWN_ERROR - Failed to validate the yum transaction.",
                timeout=600,
            )
            == 0
        )

    assert c2r.exitstatus == 1


@pytest.fixture
def packages_with_period(shell):
    """
    Fixture.
    Install problematic packages with period in name.
    E.g. python3.11-3.11.2-2.el8.x86_64 java-1.8.0-openjdk-headless-1.8.0.372.b07-4.el8.x86_64
    """
    problematic_packages = ["python3.11-3.11.2-2.el8.x86_64", "java-1.8.0-openjdk-headless-1.8.0.372.b07-4.el8.x86_64"]
    # We don't care for the telemetry, disable the collection to skip over the acknowledgement
    os.environ["CONVERT2RHEL_DISABLE_TELEMETRY"] = "1"

    # Install packages with in name period
    for package in problematic_packages:
        shell(f"yum install -y {package}")

    yield

    # Remove problematic packages
    for package in problematic_packages:
        shell(f"yum remove -y {package}")

    # Remove the envar
    del os.environ["CONVERT2RHEL_DISABLE_TELEMETRY"]


@pytest.mark.test_validation_packages_with_in_name_period
def test_validation_packages_with_in_name_period(shell, convert2rhel, packages_with_period):
    """
    This test verifies that packages with period in their name are parsed correctly.
        1/ Install problematic packages with period in name using packages_with_period fixture.
            E.g. python3.11-3.11.2-2.el8.x86_64 java-1.8.0-openjdk-headless-1.8.0.372.b07-4.el8.x86_64
        2/ Run conversion and expect no issues with the transaction validation.
            If there are issues with the Unhandled exception was caught: too many values to unpack (expected 2),
            raise AssertionError.
        3/ End the conversion at the Point of no return
    """

    with convert2rhel(
        "--no-rpm-va --serverurl {} --username {} --password {} --pool {} --debug".format(
            env.str("RHSM_SERVER_URL"),
            env.str("RHSM_USERNAME"),
            env.str("RHSM_PASSWORD"),
            env.str("RHSM_POOL"),
        )
    ) as c2r:
        c2r_expect_index = c2r.expect(
            [
                "No problems detected during the analysis!",
                "VALIDATE_PACKAGE_MANAGER_TRANSACTION::UNEXPECTED_ERROR - Unhandled exception was caught: too many values to unpack (expected 2)",
            ]
        )

        if c2r_expect_index == 0:
            c2r.expect("Continue with the system conversion")
            c2r.sendline("n")
        elif c2r_expect_index == 1:
            assert AssertionError

    assert c2r.exitstatus != 0
