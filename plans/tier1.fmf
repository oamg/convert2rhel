discover+:
    tier: 1

/activation_key:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/method/activation_key.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/rhsm:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/method/rhsm.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/satellite:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/method/satellite.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/custom_repos:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: add custom repos
    how: ansible
    playbook: tests/ansible_collections/roles/add-custom-repos/main.yml
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/method/custom_repos.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/changed_yum_conf:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/changed-yum-conf/test_patch_yum_conf.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/remove_excluded_pkgs:
  adjust:
    enabled: false
    when: >
      distro != centos-8
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/remove-excluded-pkgs/test_remove_excluded_pkgs.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/remove_all_submgr_pkgs:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: test no sub manager installed
    how: shell
    script: pytest -svv tests/integration/tier1/remove-all-submgr-pkgs/test_no_submgr_pkg_installed.py
  - name: install subscription manager
    how: ansible
    playbook: tests/ansible_collections/roles/install-submgr/main.yml
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/remove-all-submgr-pkgs/test_submgr_pkg_installed.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/resolve_dependency:
  # There is no dependecy package for Oracle Linux 8
  adjust:
    enabled: false
    when: >
      distro != oraclelinux-7 and
      distro != centos-7 and
      distro != centos-8
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: install dependency packages
    how: shell
    script: pytest -svv tests/integration/tier1/resolve-dependency/install_dependency_packages.py
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/method/rhsm.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/one_kernel_scenario:
  adjust:
    enabled: false
    when: >
      distro != centos-7 and
      distro != oraclelinux-7
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: add custom repos
    how: ansible
    playbook: tests/ansible_collections/roles/add-custom-repos/main.yml
  - name: install one kernel
    how: shell
    script: pytest -svv tests/integration/tier1/one-kernel-scenario/install_one_kernel.py
  - name: reboot machine
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml
  - name: remove other kernels
    how: shell
    script: pytest -svv tests/integration/tier1/one-kernel-scenario/remove_other_kernels.py
  - name: reboot machine
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml
  - name: run conversion
    how: shell
    script: pytest -svv tests/integration/tier1/one-kernel-scenario/run_conversion.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/language_test:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: set non english locale
    how: shell
    script: pytest -svv tests/integration/tier1/set-locale/use_non_english_language.py
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/method/activation_key.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/missing_os_release:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: remove os-relase
    how: shell
    script: pytest -svv tests/integration/tier1/os-release-removal/remove_os_release.py
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/method/satellite.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/yum_distro_sync:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: enable extras repo for Oracle Linux
    how: ansible
    playbook: tests/integration/tier1/yum-distro-sync/add-extras-repo/main.yml
  - name: install problematic package
    how: shell
    script: pytest -svv tests/integration/tier1/yum-distro-sync/install_problematic_package.py
  - name: main conversion preparation
    how: shell
    script: pytest -svv tests/integration/tier1/yum-distro-sync/test_yum_distro_sync.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/convert_offline_systems:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: install subscription manager
    how: ansible
    playbook: tests/ansible_collections/roles/install-submgr/main.yml
  - name: allow access to Satellite only
    how: shell
    script: pytest -svv tests/integration/tier1/convert-offline-systems/prepare_system.py
  - name: run offline conversion
    how: shell
    script: pytest -svv tests/integration/tier1/convert-offline-systems/run_conversion.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml

/system_up_to_date:
  discover+:
    test: checks-after-conversion
  prepare+:
  - name: preapre non latest kernel
    how: shell
    script: pytest -svv tests/integration/tier1/system-up-to-date/install_non_latest_kernel.py
  - name: reboot machine
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml
  - name: test inhibitor on non latest kernels
    how: shell
    script: pytest -svv tests/integration/tier1/system-up-to-date/test_non_latest_kernel_inhibitor.py
  - name: reboot machine
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml
  - name: test conversion non updated package
    how: shell
    script: pytest -svv tests/integration/tier1/system-up-to-date/test_system_up_to_date.py
  - name: reboot after conversion
    how: ansible
    playbook: tests/ansible_collections/roles/reboot/main.yml
